import ExchangeColumn, { ColumnType } from "components/ExchangeColumn";
import type { NextPage } from "next";
import Head from "next/head";
import { ChangeEvent, useCallback, useEffect, useMemo, useState } from "react";
import styled from "styled-components";
import { APIResponse, ReceiptCountryPay } from "types";
import { getLocaleString } from "utils";
import styles from "../styles/Home.module.css";

const SEND_COUNTRY_PAY = "USD";

const Home: NextPage = () => {
  const [receiptCountryPay, setReceiptCountryPay] =
    useState<ReceiptCountryPay>("KRW");
  const [sendPrice, setSendPrice] = useState("0");
  const [loading, setLoading] = useState(true);
  const [exchangeRate, setExchangeRate] = useState<APIResponse>();
  const [exchangeCalculateText, setExchangeCalculateText] = useState("");

  useEffect(() => {
    fetch(
      `http://api.currencylayer.com/live?access_key=43b25c9df041d6fa6673b4be433d686b&format=1&source=${SEND_COUNTRY_PAY}&currencies=${receiptCountryPay}`
    )
      .then((res) => res.json())
      .then((data: APIResponse) => {
        if (data.success) {
          setExchangeRate(data);
        } else {
          alert("환율정보 조회에 실패했습니다. 잠시후 다시시도해주세요.");
        }
      })
      .catch((err) => {
        console.error(err);
        alert("환율정보 조회에 실패했습니다. 잠시후 다시시도해주세요.");
      })
      .finally(() => {
        setLoading(false);
      });
  }, [receiptCountryPay]);

  const exchangeResult = useMemo(() => {
    if (loading) {
      return "환율 계산중..";
    } else {
      return `${getLocaleString(
        exchangeRate?.quotes[`${SEND_COUNTRY_PAY}${receiptCountryPay}`]
      )} ${SEND_COUNTRY_PAY}/${receiptCountryPay}`;
    }
  }, [loading, exchangeRate, receiptCountryPay]);

  const onCalculate = useCallback(() => {
    const sendPriceNumber = parseInt(sendPrice);
    if (sendPriceNumber < 0 || sendPriceNumber > 10000) {
      alert("송금액이 바르지 않습니다");
      return;
    }
    if (exchangeRate?.quotes[`${SEND_COUNTRY_PAY}${receiptCountryPay}`]) {
      const calculateResult =
        sendPriceNumber *
        exchangeRate?.quotes[`${SEND_COUNTRY_PAY}${receiptCountryPay}`];
      const text = `수취금액은 ${getLocaleString(
        calculateResult
      )} ${receiptCountryPay} 입니다.`;
      setExchangeCalculateText(text);
    }
  }, [exchangeRate, receiptCountryPay, sendPrice]);

  const handleChange = useCallback(
    (
      e: ChangeEvent<HTMLSelectElement | HTMLInputElement>,
      type: ColumnType
    ) => {
      e.preventDefault();
      switch (type) {
        case "receiptCountry":
          setReceiptCountryPay(e.target.value as ReceiptCountryPay);
          break;
        case "sendPriceInput":
          setSendPrice(e.target.value);
          break;
      }
    },
    []
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>환율계산 사이트</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>환율계산</h1>
        <ExchangeColumnArea>
          <ExchangeColumn
            columnType={"sendCountry"}
            title={"송금국가"}
            value={SEND_COUNTRY_PAY}
          />
          <ExchangeColumn
            columnType={"receiptCountry"}
            title={"수취국가"}
            value={receiptCountryPay}
            handleChange={handleChange}
          />
          <ExchangeColumn
            columnType={"exchangeResult"}
            title={"환율"}
            value={exchangeResult}
          />
          <ExchangeColumn
            columnType={"sendPriceInput"}
            title={"송금액"}
            value={sendPrice}
            handleChange={handleChange}
            subValue={SEND_COUNTRY_PAY}
          />
        </ExchangeColumnArea>
        <ExchangeCalculationButton onClick={onCalculate}>
          Submit
        </ExchangeCalculationButton>
        <ExchangeCalculationText>
          {exchangeCalculateText}
        </ExchangeCalculationText>
      </main>
    </div>
  );
};

export default Home;

const ExchangeColumnArea = styled.ul`
  margin: 0;
  padding: 0;
`;

const ExchangeCalculationButton = styled.button`
  margin-top: 15px;
`;

const ExchangeCalculationText = styled.h2``;
